pipeline {
    agent any

    environment {
        GITHUB_TOKEN = credentials('github-token')
        GITHUB_REPO = 'cyse7125-su24-team13/helm-webapp-cve-processor'
        GITHUB_API_URL = 'https://api.github.com'
    }

    parameters {
        string(name: 'GIT_COMMIT_ID', defaultValue: '', description: 'The commit ID to use for the release')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Semantic Versioning') {
            steps {
                script {
                    def newVersion = semanticVersioning {
                        versionSourceType = 'ANY' // Can be 'ANY', 'GIT', 'FILE', 'SUBVERSION', etc.
                        majorVersionPattern = '^BREAKING'
                        minorVersionPattern = '^feat'
                        patchVersionPattern = '^fix'
                        versionFilePath = 'charts/cve-processor/Chart.yaml'
                        versionCodePattern = 'version: (\\d+\\.\\d+\\.\\d+)' // Adjust regex pattern if necessary
                        initialVersion = '0.1.0'
                        versionIncremented = 'patch' // Can be 'major', 'minor', 'patch'
                    }
                    env.NEW_VERSION = newVersion

                    echo "New version: ${newVersion}"
                    sh "sed -i 's/^version:.*/version: ${newVersion}/' charts/cve-processor/Chart.yaml"
                    sh "git add charts/cve-processor/Chart.yaml"
                    sh "git commit -m 'chore(release): ${newVersion} [skip ci]'"
                    sh "git push origin main"
                }
            }
        }

        stage('Create GitHub Release') {
            steps {
                script {
                    echo "Creating GitHub release..."
                    def newVersion = env.NEW_VERSION
                    echo "New version for release: ${newVersion}"
                    sh "helm package charts/cve-processor --version ${newVersion} --destination ./releases"
                    sh "github-release release --user cyse7125-su24-team13 --repo helm-webapp-cve-processor --tag v${newVersion} --name 'v${newVersion}' --description 'Release of version ${newVersion}' --pre-release=false --file ./releases/cve-processor-${newVersion}.tgz"
                }
            }
        }
    }

    post {
        failure {
            script {
                def status = 'failure'
                def description = 'Post-merge pipeline failed.'
                notifyGithub(params.GIT_COMMIT_ID, status, description)
            }
        }

        success {
            script {
                def status = 'success'
                def description = 'Post-merge pipeline successful.'
                notifyGithub(params.GIT_COMMIT_ID, status, description)
            }
        }
    }
}

def notifyGithub(commitId, status, description) {
    def context = 'post-merge'
    def url = "${env.GITHUB_API_URL}/repos/${env.GITHUB_REPO}/statuses/${commitId}"

    def payload = [
        state       : status,
        target_url  : env.BUILD_URL,
        description : description,
        context     : context
    ]

    def response = sh(
        script: """#!/bin/bash
        curl -s -H "Authorization: token ${env.GITHUB_TOKEN}" \\
             -H "Content-Type: application/json" \\
             -d '${groovy.json.JsonOutput.toJson(payload)}' \\
             ${url}
        """,
        returnStdout: true
    ).trim()

    echo "GitHub API response: ${response}"
}
