pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = credentials('github-token') // The credentials ID containing 'username:token'
        GITHUB_REPO = 'cyse7125-su24-team13/helm-webapp-cve-processor'
        GITHUB_API_URL = 'https://api.github.com'
        NODE_VERSION = '20' // Specify the Node.js version you want to install
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    def scmVars = checkout scm
                    def commitId = scmVars.GIT_COMMIT
                    env.GIT_COMMIT_ID = commitId
                    def credentialsParts = GITHUB_CREDENTIALS.split(':')
                    if (credentialsParts.length != 2) {
                        error 'Invalid GitHub credentials format. Expected format: username:token'
                    }
                    env.GITHUB_USER = credentialsParts[0]
                    env.GITHUB_TOKEN = credentialsParts[1]
                }
            }
        }

        stage('Install Node.js and Dependencies') {
            steps {
                sh '''
                    # Install Node.js from NodeSource
                    curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION} | sudo -E bash -
                    sudo apt-get install -y nodejs

                    # Verify Node.js and npm versions
                    node -v
                    npm -v

                    # Install Helm if it's not already installed
                    if ! command -v helm &> /dev/null
                    then
                        echo "Helm not found, installing..."
                        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                    else
                        echo "Helm is already installed."
                    fi

                    npm install semantic-release@latest \
                                @semantic-release/changelog@latest \
                                @semantic-release/commit-analyzer@latest \
                                @semantic-release/release-notes-generator@latest \
                                @semantic-release/git@latest \
                                @semantic-release/github@latest --legacy-peer-deps

                '''
            }
        }

        stage('Semantic Release') {
            steps {
                script {
                    echo "Running semantic-release..."
                    def releaseOutput = sh(script: "npx semantic-release", returnStdout: true).trim()
                    echo "Semantic release output: ${releaseOutput}"
                    def newVersionMatcher = (releaseOutput =~ /The next release version is (\d+\.\d+\.\d+)/)
                    if (newVersionMatcher.find()) {
                        def newVersion = newVersionMatcher.group(1)
                        echo "Extracted new version: ${newVersion}"
                        env.NEW_VERSION = newVersion // Store the new version in an environment variable
                    } else {
                        echo "No new version found from semantic-release."
                        env.NEW_VERSION = null
                    }
                }
            }
        }

        stage('Update Chart Version') {
            when {
                expression { env.NEW_VERSION != null }
            }
            steps {
                script {
                    echo "Updating Chart version to ${env.NEW_VERSION}..."
                    sh "sed -i 's/^version:.*/version: ${env.NEW_VERSION}/' charts/cve-processor/Chart.yaml"
                    sh "git add charts/cve-processor/Chart.yaml"
                    sh "git config user.name 'vakiti3010'"
                    sh "git config user.email 'vakiti.s@northeastern.edu'"
                    sh "git commit -m 'chore(release): ${env.NEW_VERSION} [skip ci]'"
                    sh """
                        git pull --rebase https://${env.GITHUB_USER}:${env.GITHUB_TOKEN}@github.com/${env.GITHUB_REPO}.git main
                        git push https://${env.GITHUB_USER}:${env.GITHUB_TOKEN}@github.com/${env.GITHUB_REPO}.git main
                    """
                }
            }
        }
    }

    post {
        failure {
            script {
                def status = 'failure'
                def description = 'Post-merge pipeline failed.'
                notifyGithub(env.GIT_COMMIT_ID, status, description)
            }
        }

        success {
            script {
                def status = 'success'
                def description = 'Post-merge pipeline successful.'
                notifyGithub(env.GIT_COMMIT_ID, status, description)
            }
        }
    }
}

def notifyGithub(commitId, status, description) {
    def context = 'post-merge'
    def url = "${env.GITHUB_API_URL}/repos/${env.GITHUB_REPO}/statuses/${commitId}"

    def payload = [
        state       : status,
        target_url  : env.BUILD_URL,
        description : description,
        context     : context
    ]

    def response = sh(
        script: """#!/bin/bash
        curl -s -H "Authorization: token ${env.GITHUB_TOKEN}" \\
             -H "Content-Type: application/json" \\
             -d '${groovy.json.JsonOutput.toJson(payload)}' \\
             ${url}
        """,
        returnStdout: true
    ).trim()

    echo "GitHub API response: ${response}"
}
