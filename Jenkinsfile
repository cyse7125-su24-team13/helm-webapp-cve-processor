pipeline {
    agent any

    environment {
        GITHUB_TOKEN = credentials('github-token')
        GITHUB_REPO = 'cyse7125-su24-team13/helm-webapp-cve-processor'
        GITHUB_API_URL = 'https://api.github.com'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    def scmVars = checkout scm
                    def commitId = scmVars.GIT_COMMIT
                    env.GIT_COMMIT_ID = commitId
                }
            }
        }

        stage('Install Helm') {
            steps {
                sh '''
                    if ! command -v helm &> /dev/null
                    then
                        echo "Helm not found, installing..."
                        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                    else
                        echo "Helm is already installed."
                    fi
                '''
            }
        }

        stage('Helm Lint') {
            steps {
                script {
                    def status = sh(script: "helm lint charts/cve-processor", returnStatus: true)
                    if (status != 0) {
                        error "Helm lint failed"
                    } else {
                        echo "Helm lint passed"
                    }
                }
            }
        }

        stage('Helm Template') {
            steps {
                script {
                    def status = sh(script: "helm template charts/cve-processor", returnStatus: true)
                    if (status != 0) {
                        error "Helm template failed"
                    } else {
                        echo "Helm template passed"
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                def commitId = env.GIT_COMMIT_ID
                def status = 'success'
                def description = 'Helm lint and template successful.'
                notifyGithub(commitId, status, description)

                if (env.BRANCH_NAME == 'main') {
                    handleMerge()
                }
            }
        }

        failure {
            script {
                def commitId = env.GIT_COMMIT_ID
                def status = 'failure'
                def description = 'Helm lint or template failed.'
                notifyGithub(commitId, status, description)
            }
        }
    }
}

def notifyGithub(commitId, status, description) {
    def context = 'helm'
    def url = "${env.GITHUB_API_URL}/repos/${env.GITHUB_REPO}/statuses/${commitId}"

    def payload = [
        state       : status,
        target_url  : env.BUILD_URL,
        description : description,
        context     : context
    ]

    def response = sh(
        script: """#!/bin/bash
        curl -s -H "Authorization: token ${env.GITHUB_TOKEN}" \\
             -H "Content-Type: application/json" \\
             -d '${groovy.json.JsonOutput.toJson(payload)}' \\
             ${url}
        """,
        returnStdout: true
    ).trim()

    echo "GitHub API response: ${response}"
}

def handleMerge() {
    stage('Install Dependencies') {
        script {
            echo "Installing project dependencies..."
            sh 'npm install'
        }
    }

    stage('Semantic Release') {
        script {
            echo "Running semantic-release..."
            def result = sh(script: "npx semantic-release", returnStatus: true)
            if (result != 0) {
                error "Semantic release failed"
            }
        }
    }

    stage('Update Chart Version') {
        script {
            echo "Updating Chart version..."
            def newVersion = sh(script: "npx semantic-release version", returnStdout: true).trim()
            sh "sed -i 's/^version:.*/version: ${newVersion}/' charts/cve-processor/Chart.yaml"
            sh "git add charts/cve-processor/Chart.yaml"
            sh "git commit -m 'chore(release): ${newVersion} [skip ci]'"
            sh "git push origin main"
        }
    }

    stage('Create GitHub Release') {
        script {
            echo "Creating GitHub release..."
            def newVersion = sh(script: "npx semantic-release version", returnStdout: true).trim()
            sh "helm package charts/cve-processor --version ${newVersion} --destination ./releases"
            sh "github-release release --user cyse7125-su24-team13 --repo helm-webapp-cve-processor --tag v${newVersion} --name 'v${newVersion}' --description 'Release of version ${newVersion}' --pre-release=false --file ./releases/cve-processor-${newVersion}.tgz"
        }
    }
}
